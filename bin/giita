#!/usr/bin/perl

use MojaMoja qw/render/;
use Path::Class qw/file dir/;
use Plack::Runner;
use Plack::Request;
use Text::VimColor;
use Pod::Simple::XHTML;
use Text::Markdown qw/markdown/;
use HTML::TreeBuilder::XPath;
use Git::Class::Cmd;

our $VERSION = '0.01';

my $root      = dir('./');
my @root_path = split '/', $root->absolute;
my $root_name = pop @root_path;
my $git_cmd =
  Git::Class::Cmd->new( die_on_error => 1, git_dir => $root->subdir('.git') );

my $runner = Plack::Runner->new;
$runner->parse_options(@ARGV);
$runner->run( sub { app(@_) } );

sub app {
    my $env     = shift;
    my $req     = Plack::Request->new($env);
    my $current = $req->path_info;
    $current =~ s!^/!./!;

    my $base = $req->base;

    if( my $sha = $req->param('commit') ) {
        my $git_commit = git_show($sha);
        return make_response( render('commit.mt') );
    }

    if ( -d $current ) {
        $current = dir($current);
        my ( $children, $git_logs ) = get_dir($current);
        return make_response( render('dir.mt') );
    }

    if ( -B $current ) {
        my $body = file($current)->slurp;
        return [ 200, [ 'Content-Length' => length $body ], [$body] ];
    }

    if ( -f $current ) {
        $current = file($current);
        my ( $content, $git_logs ) = get_file($current);
        return make_response( render('file.mt') );
    }
    return [ 404, [], ['404 Document Not Found'] ];
}

sub make_response {
    my $body = shift;
    my $head = render('head.mt');
    my $foot = render('foot.mt');
    my $res  = res(200);
    $res->body( $head . $body . $foot );
    $res->content_type('text/html');
    $res->finalize;
}

sub get_dir {
    my $path = shift;
    $path ||= dir('./');
    my @children = $path->children;
    if (wantarray) {
        return ( \@children, git_info($path) );
    }
    else {
        return \@children;
    }
}

sub get_file {
    my $path = shift;
    my $text = $path->slurp;
    my $html;
    my ($ext) = $path->basename =~ /\.([^\.]+)$/;
    if ( $ext =~ /(?:pm|pl|psgi|pod|t)/i ) {
        $html .= pod($text);
        $html .= '<pre class="code">' . highlight($text) . '</pre>';
    }
    elsif ( $ext =~ /(?:md|mkdn)/i ) {
        $html .= markdown($text);
        $html .= '<pre>' . highlight($text) . '</pre>';
    }
    else {
        $html = '<pre>' . highlight($text) . '</pre>';
    }
    if (wantarray) {
        return ( $html, git_info($path) );
    }
    else {
        return $html;
    }
}

sub git_info {
    my $path = shift;
    my $git_logs;
    my $git_diff = git_diff($path);
    my $git_log  = git_log($path);
    push @$git_logs, $git_diff if $git_diff;
    push @$git_logs, $git_log if $git_log;
    return $git_logs;
}

sub highlight {
    my ( $text, $type ) = @_;
    $type ||= 'perl';
    my $syntax = Text::VimColor->new(
        string   => $text,
        filetype => $type,
    );
    return $syntax->html;
}

sub pod {
    my $text   = shift;
    my $parser = Pod::Simple::XHTML->new();
    my $html;
    $parser->output_string( \$html );
    $parser->html_header('');
    $parser->html_footer('');
    $parser->html_h_level(3);
    $parser->parse_string_document($text);
    $html = highlight_pod($html);
    $html = '<div class="pod">' . $html . '</div>';
    return $html;
}

sub highlight_pod {
    my $html = shift;
    my $tree = HTML::TreeBuilder::XPath->new;
    $tree->parse($html);
    for my $code ( $tree->findnodes('//pre') ) {
        my $hilight_code = highlight( $code->as_text );
        my $code_html    = $code->as_HTML;
        $html =~ s/\Q$code_html\E/<pre>$hilight_code<\/pre>/m;
    }
    return $html;
}

sub git_log {
    my $path = shift;
    my $log = $git_cmd->git( 'log', $path );
    $log = escape($log);
    my $html;
    for my $l ( split '\n', $log) {
        $l =~ s!commit\s([0-9a-z]+)!commit <a href="/?commit=$1">$1</a>!;
        $html .= $l . "\n";
    }
    return $html;
}

sub git_diff {
    my $path = shift;
    my $log = $git_cmd->git( 'diff', $path );
    $log = highlight($log, 'diff') if $log;
    return $log;
}

sub git_show {
    my $sha = shift;
    my $log = $git_cmd->git( 'show', $sha );
    $log = highlight($log, 'diff') if $log;
    return $log;
}

sub escape {
    my $html          = shift;
    my %_escape_table = (
        '&'  => '&amp;',
        '>'  => '&gt;',
        '<'  => '&lt;',
        '"'  => '&quot;',
        '\'' => '&#39;'
    );
    $html =~ s/([&><\"\'])/$_escape_table{$1}/gme;
    return $html;
}

=head1 NAME

giita - Lightweight Rock Band.

=head1 DESCRIPTION

Yet another git repository viewer support perl and pod styling using "many" CPAN modules.

=head1 SYNOPSIS

Run on your git directory to want to see.

  $ giita

=head1 HOW TO GET

  $ git clone git://github.com/yusukebe/giita.git

=head1 AUTHOR

Yusuke Wada

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

__DATA__

@@ dir.mt
<h1>
? my @path = split '/', $current;
? my $current_path = pop @path;
? my $path_info = '';
<a href="<?= $base ?>"><?= $root_name ?></a> /
? for my $p ( @path ) {
? next if $p eq '.';
? $path_info .= $p . '/';
<a href="<?= $base ?><?= $path_info ?>">
<?= $p ?>
</a> /
? }
<?= $current_path ?>
</h1>
<hr />
<ul>
? for my $obj ( @$children ) {
? my ($obj_name) = $obj->stringify =~ m!/([^/]+)$!;
? $obj_name ||= $obj->stringify;
<li class="<? if ( $obj->is_dir ) { ?>dir<? }else { ?>file<? } ?>"><a href="<?= $base ?><?= $obj ?>"><?= $obj_name ?></a></li>
? }
</ul>
? for my $log ( @$git_logs ) {
<pre class="git">
?= Text::MicroTemplate::encoded_string $log
</pre>
? }

@@ file.mt
<h1>
? my @path = split '/', $current;
? my $current_path = pop @path;
? my $path_info = '';
<a href="<?= $base ?>"><?= $root_name ?></a> /
? for my $p ( @path ) {
? $path_info .= $p . '/';
? next if $p eq '.';
<a href="<?= $base ?><?= $path_info ?>"><?= $p ?></a> /
? }
<?= $current_path ?>
</h1>
<hr />
<div class="span-16">
?= Text::MicroTemplate::encoded_string $content
</div>
<div class="span-8 last">
? for my $log ( @$git_logs ) {
<pre class="git" style="font-size:0.8em;">
?= Text::MicroTemplate::encoded_string $log
</pre>
? }
</div>

@@ commit.mt
<h1><a href="<?= $base ?>"><?= $root_name ?></a> / <?= $sha ?></h1>
<hr />
<pre class="git">
?= Text::MicroTemplate::encoded_string $git_commit
</pre>

@@ head.mt
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
</head>
<title><?= $root_name ?></title>
<link rel="stylesheet" href="http://github.com/yusukebe/giita/raw/master/static/screen.css" type="text/css" media="screen, projection">
<link rel="stylesheet" href="http://github.com/yusukebe/giita/raw/master/static/site.css" type="text/css" />
<link rel="stylesheet" href="http://github.com/yusukebe/giita/raw/master/static/print.css" type="text/css" media="print">
<!--[if lt IE 8]><link rel="stylesheet" href="http://github.com/yusukebe/giita/raw/master/static/ie.css" type="text/css" media="screen, projection"><![endif]-->
</head>
<body>
<div class="container">
<hr class="space" />

@@ foot.mt
<hr >
<address>giita - lightweigth rock band. <a href="http://github.com/yusukebe/giita">repository on github</a>.</address>
</div>
</body>
</html>
